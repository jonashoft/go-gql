package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"
	"graphql-go/graph/model"
	"graphql-go/persistence"
)

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*persistence.User
	res := r.DB.Find(&users)

	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.UsersToModels(users), nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user := persistence.User{}
	res := r.DB.First(&user, id)

	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.UserToModel(&user), nil
}

// BurgerDays is the resolver for the burger_days field.
func (r *queryResolver) BurgerDays(ctx context.Context) ([]*model.BurgerDay, error) {
	var burgerDays []*persistence.BurgerDay
	res := r.DB.Find(&burgerDays)

	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.BurgerDaysToModels(burgerDays), nil
}

// BurgerDay is the resolver for the burger_day field.
func (r *queryResolver) BurgerDay(ctx context.Context, id string) (*model.BurgerDay, error) {
	burgerDay := persistence.BurgerDay{}
	res := r.DB.First(&burgerDay, id)

	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.BurgerDayToModel(&burgerDay), nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	var orders []*persistence.Order

	res := r.DB.Find(&orders)

	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.OrdersToModels(orders), nil
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	order := persistence.Order{}
	res := r.DB.First(&order, id)

	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.OrderToModel(&order), nil
}

// AccumualteOrder is the resolver for the accumualte_order field.
func (r *queryResolver) AccumualteOrder(ctx context.Context) (*model.AccumulatedOrders, error) {
	panic(fmt.Errorf("not implemented: AccumualteOrder - accumualte_order"))
}
