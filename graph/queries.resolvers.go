package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"graphql-go/db"
	"graphql-go/graph/model"
)

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {

	var users []*db.User
	err := r.DB.Model(&users).Select()
	return db.UsersToModels(users), err
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user := &db.User{ID: id}
	err := r.DB.Model(user).WherePK().Select()
	return db.UserToModel(user), err
}

// BurgerDays is the resolver for the burger_days field.
func (r *queryResolver) BurgerDays(ctx context.Context) ([]*model.BurgerDay, error) {
	var burgerDays []*db.BurgerDay
	err := r.DB.Model(&burgerDays).Select()
	return db.BurgerDaysToModels(burgerDays), err
}

// BurgerDay is the resolver for the burger_day field.
func (r *queryResolver) BurgerDay(ctx context.Context, id string) (*model.BurgerDay, error) {
	burgerDay := &db.BurgerDay{ID: id}
	err := r.DB.Model(burgerDay).WherePK().Select()
	return db.BurgerDayToModel(burgerDay), err
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	var orders []*db.Order
	err := r.DB.Model(&orders).Select()
	return db.OrdersToModels(orders), err
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	order := &db.Order{ID: id}
	err := r.DB.Model(order).WherePK().Select()
	return db.OrderToModel(order), err
}
