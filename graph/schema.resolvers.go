package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"graphql-go/db"
	"graphql-go/graph/model"
	"time"

	"github.com/google/uuid"
)

// Author is the resolver for the author field.
func (r *burgerDayResolver) Author(ctx context.Context, obj *model.BurgerDay) (*model.User, error) {
	user := &db.User{ID: obj.AuthorId}

	err := r.DB.Model(user).WherePK().Select()
	if err != nil {
		panic(err)
	}
	return db.UserToModel(user), nil
}

// Orders is the resolver for the orders field.
func (r *burgerDayResolver) Orders(ctx context.Context, obj *model.BurgerDay) ([]*model.Order, error) {
	var orders []*db.Order
	err := r.DB.Model(&orders).Where("burger_day_id = ?", obj.ID).Select()
	if err != nil {
		panic(err)
	}
	return db.OrdersToModels(orders), nil
}

// OrderBurger is the resolver for the orderBurger field.
func (r *mutationResolver) OrderBurger(ctx context.Context, userID string, burgerDayID string, specialRequest []model.SpecialOrders) (*model.Order, error) {
	user := &db.User{ID: userID}
	err1 := r.DB.Model(user).WherePK().Select()
	burger := &db.BurgerDay{ID: burgerDayID}
	err2 := r.DB.Model(burger).WherePK().Select()
	if err1 != nil || err2 != nil {
		panic(err1)
	}

	order := &db.Order{
		ID:             uuid.New().String(),
		BurgerDay:      burger,
		BurgerDayId:    burger.ID,
		User:           user,
		UserId:         user.ID,
		SpecialRequest: db.SpecialOrdersToStrings(specialRequest),
	}

	_, err3 := r.DB.Model(order).Insert()
	if err3 != nil {
		panic(err3)
	}

	return db.OrderToModel(order), nil
}

// StartBurgerDay is the resolver for the start_burger_day field.
func (r *mutationResolver) StartBurgerDay(ctx context.Context, authorID string) (*model.BurgerDay, error) {
	now := time.Now().Format("2006-01-02")
	user := &db.User{ID: authorID}
	err1 := r.DB.Model(user).WherePK().Select()
	if err1 != nil {
		panic(err1)
	}

	bday := &db.BurgerDay{
		ID:       uuid.New().String(),
		Author:   user,
		AuthorId: user.ID,
		Date:     now,
	}

	_, err2 := r.DB.Model(bday).Insert()
	if err2 != nil {
		panic(err2)
	}
	return db.BurgerDayToModel(bday), nil
}

// CreateUser is the resolver for the create_user field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*model.User, error) {
	user := &db.User{
		ID:    uuid.New().String(),
		Name:  name,
		Email: email,
	}

	_, _ = r.DB.Model(user).Insert()

	return db.UserToModel(user), nil
}

// BurgerDay is the resolver for the burgerDay field.
func (r *orderResolver) BurgerDay(ctx context.Context, obj *model.Order) (*model.BurgerDay, error) {
	bday := &db.BurgerDay{ID: obj.BurgerDayId}
	err := r.DB.Model(bday).WherePK().Select()
	if err != nil {
		panic(err)
	}
	return db.BurgerDayToModel(bday), nil
}

// User is the resolver for the user field.
func (r *orderResolver) User(ctx context.Context, obj *model.Order) (*model.User, error) {
	user := &db.User{ID: obj.UserId}
	err := r.DB.Model(user).WherePK().Select()
	if err != nil {
		panic(err)
	}
	return db.UserToModel(user), nil
}

// TodaysBurgers is the resolver for the todays_burgers field.
func (r *queryResolver) TodaysBurgers(ctx context.Context) (*model.BurgerDay, error) {
	currentDate := time.Now().Format("2006-01-02")

	burgerDay := &db.BurgerDay{}
	// Use the formatted currentDate in the WHERE clause
	err := r.DB.Model(burgerDay).
		Where("date = ?", currentDate).
		First()

	if err != nil {
		// Handle errors gracefully
		return nil, err
	}

	// Convert the database model to your GraphQL model
	// Ensure db.BurgerDayToModel exists and performs the necessary conversion
	return db.BurgerDayToModel(burgerDay), nil
}

// BurgerDay returns BurgerDayResolver implementation.
func (r *Resolver) BurgerDay() BurgerDayResolver { return &burgerDayResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Order returns OrderResolver implementation.
func (r *Resolver) Order() OrderResolver { return &orderResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type burgerDayResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type orderResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
