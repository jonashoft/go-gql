package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"errors"
	"graphql-go/auth"
	"graphql-go/core/stats"
	"graphql-go/graph/model"
	"graphql-go/persistence"
	"slices"
	"strings"
	"time"

	"github.com/google/uuid"
	"gorm.io/gorm"
)

// Author is the resolver for the author field.
func (r *burgerDayResolver) Author(ctx context.Context, obj *model.BurgerDay) (*model.User, error) {
	user := &persistence.User{ID: obj.AuthorId}
	res := r.DB.First(user)
	if res.Error != nil {
		return nil, res.Error // It's better to return the error rather than panic, to handle it gracefully
	}

	// Assuming persistence.UserToModel converts a persistence.User to a *model.User
	return persistence.UserToModel(user), nil
}

// Orders is the resolver for the orders field.
func (r *burgerDayResolver) Orders(ctx context.Context, obj *model.BurgerDay) ([]*model.Order, error) {
	var orders []*persistence.Order

	res := r.DB.Where("burger_day_id = ?", obj.ID).Find(&orders)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.OrdersToModels(orders), nil
}

// OrdersCount is the resolver for the ordersCount field.
func (r *burgerDayResolver) OrdersCount(ctx context.Context, obj *model.BurgerDay) (int, error) {
	var count int64
	err := r.DB.Model(&persistence.Order{}).Where("burger_day_id = ?", obj.ID).Count(&count).Error
	if err != nil {
		return 0, err
	}
	return int(count), nil
}

// CloseBurgerDay is the resolver for the close_burger_day field.
func (r *mutationResolver) CloseBurgerDay(ctx context.Context, burgerDayID string) (*model.BurgerDay, error) {
	burgerDay := &persistence.BurgerDay{ID: burgerDayID}
	res := r.DB.First(burgerDay)

	if res.Error != nil {
		return nil, res.Error
	}

	burgerDay.Closed = true
	res = r.DB.Save(burgerDay)

	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.BurgerDayToModel(burgerDay), nil
}

// CreateUser is the resolver for the create_user field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*model.User, error) {
	user := &persistence.User{
		ID:    uuid.New().String(),
		Name:  name,
		Email: email,
	}

	res := r.DB.Create(user)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.UserToModel(user), nil
}

// OrderBurger is the resolver for the orderBurger field.
func (r *mutationResolver) OrderBurger(ctx context.Context, burgerDayID string, specialRequest []model.SpecialOrders) (*model.Order, error) {
	user := auth.ForContext(ctx)
	order := &persistence.Order{
		ID:             uuid.New().String(),
		UserId:         user.ID,
		BurgerDayId:    burgerDayID,
		SpecialRequest: persistence.SpecialOrdersToStrings(specialRequest),
	}
	burgerDay := &persistence.BurgerDay{ID: burgerDayID}
	r.DB.First(burgerDay)
	if burgerDay.Closed {
		return nil, stats.ErrBurgerDayClosed{}
	}

	res := r.DB.Create(order)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.OrderToModel(order), nil
}

// PayOrder is the resolver for the pay_order field.
func (r *mutationResolver) PayOrder(ctx context.Context, orderID string, userID string) (*model.Order, error) {
	order := &persistence.Order{ID: orderID}
	res := r.DB.First(order)

	if res.Error != nil {
		return nil, res.Error
	}

	order.Paid = true
	res = r.DB.Save(order)
	return persistence.OrderToModel(order), res.Error
}

// StartBurgerDay is the resolver for the start_burger_day field.
func (r *mutationResolver) StartBurgerDay(ctx context.Context) (*model.BurgerDay, error) {
	user := auth.ForContext(ctx)
	currentDateString := time.Now().Format("2006-01-02") // Format the date as a string in the format "YYYY-MM-DD"

	burgerDay := &persistence.BurgerDay{
		ID:       uuid.New().String(),
		AuthorId: user.ID,
		Date:     currentDateString, // Set the date to the current date
	}

	res := r.DB.Create(burgerDay)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.BurgerDayToModel(burgerDay), nil
}

// UpdateBurgerDay is the resolver for the update_burger_day field.
func (r *mutationResolver) UpdateBurgerDay(ctx context.Context, burgerDayID string, estimatedTime *string, price *float64) (*model.BurgerDay, error) {
	burgerDay := &persistence.BurgerDay{ID: burgerDayID}
	res := r.DB.First(burgerDay)
	if res.Error != nil {
		return nil, res.Error
	}

	if estimatedTime != nil {
		burgerDay.EstimatedTime = *estimatedTime
	}
	if price != nil {
		burgerDay.Price = *price
	}

	res = r.DB.Save(burgerDay)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.BurgerDayToModel(burgerDay), nil
}

// UpdateUser is the resolver for the update_user field.
func (r *mutationResolver) UpdateUser(ctx context.Context, name *string, email *string, phoneNumber *string) (*model.User, error) {
	userCtx := auth.ForContext(ctx)
	user := &persistence.User{ID: userCtx.ID}

	res := r.DB.First(user)
	if res.Error != nil {
		return nil, res.Error
	}

	if name != nil {
		user.Name = *name
	}
	if email != nil {
		user.Email = *email
	}
	if phoneNumber != nil {
		user.PhoneNumber = *phoneNumber
	}

	res = r.DB.Save(user)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.UserToModel(user), nil
}

// DeleteBurgerDay is the resolver for the delete_burger_day field.
func (r *mutationResolver) DeleteBurgerDay(ctx context.Context, burgerDayID string) (*string, error) {
	u := auth.ForContext(ctx)

	// Create a slice of allowed emails
	allowedEmails := []string{"simon.egeberg@twoday.com", "seg@it-minds.dk", "simon.bundgaard-egeberg@twoday.com"}

	// Check if the user's email is in the allowed list
	emailAllowed := slices.Contains(allowedEmails, u.Email)

	// If email not allowed, return permission error
	if !emailAllowed {
		return nil, errors.New("permission denied: user not authorized to delete burger days")
	}

	// Then delete it
	res := r.DB.Delete(&persistence.BurgerDay{ID: burgerDayID})
	if res.Error != nil {
		return nil, res.Error
	}

	return &burgerDayID, nil
}

// BurgerDay is the resolver for the burgerDay field.
func (r *orderResolver) BurgerDay(ctx context.Context, obj *model.Order) (*model.BurgerDay, error) {
	burgerDay := &persistence.BurgerDay{ID: obj.BurgerDayId}
	res := r.DB.First(burgerDay)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.BurgerDayToModel(burgerDay), nil
}

// User is the resolver for the user field.
func (r *orderResolver) User(ctx context.Context, obj *model.Order) (*model.User, error) {
	user := &persistence.User{ID: obj.UserId}
	res := r.DB.First(user)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.UserToModel(user), nil
}

// AccumulatedOrders is the resolver for the accumulated_orders field.
func (r *queryResolver) AccumulatedOrders(ctx context.Context) (*model.AccumulatedOrders, error) {
	bg_day, error := current_burger_day(r.DB)

	if error != nil {
		return nil, error
	}
	if bg_day == nil {
		return nil, nil
	}
	var orders []*persistence.Order
	if err := r.DB.Where("burger_day_id = ?", bg_day.ID).Find(&orders).Error; err != nil {
		return nil, err
	}

	// Map to count unique special order combinations
	uniqueOrders := make(map[string]int)
	for _, order := range orders {
		key := strings.Join(order.SpecialRequest, ",")
		uniqueOrders[key]++
	}

	// Convert to AccumulatedOrderLine slice
	var accumulatedOrderLines []*model.AccumulatedOrderLine
	for specialReq, count := range uniqueOrders {
		specialOrders, err := persistence.StringsToSpecialOrders(strings.Split(specialReq, ","))
		if err != nil {
			return nil, err
		}
		accumulatedOrderLines = append(accumulatedOrderLines, &model.AccumulatedOrderLine{
			Amount:         count,
			SpecialRequest: specialOrders,
		})
	}

	return &model.AccumulatedOrders{
		ID:      bg_day.ID,
		Count:   len(orders),
		ToOrder: accumulatedOrderLines,
	}, nil
}

// BurgerDay is the resolver for the burger_day field.
func (r *queryResolver) BurgerDay(ctx context.Context, id string) (*model.BurgerDay, error) {
	burgerDay := persistence.BurgerDay{}
	res := r.DB.First(&burgerDay, id)

	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.BurgerDayToModel(&burgerDay), nil
}

// BurgerDays is the resolver for the burger_days field.
func (r *queryResolver) BurgerDays(ctx context.Context) ([]*model.BurgerDay, error) {
	var burgerDays []*persistence.BurgerDay
	res := r.DB.Find(&burgerDays)

	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.BurgerDaysToModels(burgerDays), nil
}

// BurgerStats is the resolver for the burgerStats field.
func (r *queryResolver) BurgerStats(ctx context.Context) (*model.BurgerStats, error) {
	res, err := stats.CalculateBurgerStats(r.DB)

	return stats.BurgerStatsToModel(res), err
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	order := persistence.Order{}
	res := r.DB.First(&order, id)

	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.OrderToModel(&order), nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	var orders []*persistence.Order

	// preload user on order
	res := r.DB.Find(&orders)

	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.OrdersToModels(orders), nil
}

// TodaysBurgers is the resolver for the todays_burgers field.
func (r *queryResolver) TodaysBurgers(ctx context.Context) (*model.BurgerDay, error) {
	currentDateString := time.Now().Format("2006-01-02") // Format the date as a string in the format "YYYY-MM-DD"
	burgerDay := &persistence.BurgerDay{}
	res := r.DB.Where("date = ?", currentDateString).First(burgerDay)
	if res.Error != nil {
		if errors.Is(res.Error, gorm.ErrRecordNotFound) {
			return nil, nil // Return nil if no record is found for today
		}
		return nil, res.Error
	}

	return persistence.BurgerDayToModel(burgerDay), nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user := persistence.User{ID: id}
	res := r.DB.First(&user)

	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.UserToModel(&user), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*persistence.User
	res := r.DB.Find(&users)

	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.UsersToModels(users), nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	user := auth.ForContext(ctx)
	return persistence.UserToModel(user), nil
}

// RingBurgerBell is the resolver for the ringBurgerBell field.
func (r *mutationResolver) RingBurgerBell(ctx context.Context, message string) (bool, error) {
	// Create a new BurgerBellEvent with the message and current timestamp
	event := &model.BurgerBellEvent{
		Message:   message,
		Timestamp: time.Now().Format(time.RFC3339),
	}

	// Use PublishBurgerBellEvent to send the event to all subscribers
	r.PublishBurgerBellEvent(event)
	return true, nil
}

// BurgerBell is the resolver for the burgerBell field.
func (r *subscriptionResolver) BurgerBell(ctx context.Context) (<-chan *model.BurgerBellEvent, error) {
	return r.BurgerBellChan, nil
}

// BurgerDay returns BurgerDayResolver implementation.
func (r *Resolver) BurgerDay() BurgerDayResolver { return &burgerDayResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Order returns OrderResolver implementation.
func (r *Resolver) Order() OrderResolver { return &orderResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver {
	return &subscriptionResolver{r}
}

type burgerDayResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type orderResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
