package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"
	"graphql-go/graph/model"
	"graphql-go/persistence"

	"github.com/google/uuid"
)

// Author is the resolver for the author field.
func (r *burgerDayResolver) Author(ctx context.Context, obj *model.BurgerDay) (*model.User, error) {
	user := &persistence.User{ID: obj.AuthorId}
	res := r.DB.First(user)
	if res.Error != nil {
		return nil, res.Error // It's better to return the error rather than panic, to handle it gracefully
	}

	// Assuming persistence.UserToModel converts a persistence.User to a *model.User
	return persistence.UserToModel(user), nil
}

// Orders is the resolver for the orders field.
func (r *burgerDayResolver) Orders(ctx context.Context, obj *model.BurgerDay) ([]*model.Order, error) {
	var orders []*persistence.Order

	res := r.DB.Where("burger_day_id = ?", obj.ID).Find(&orders)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.OrdersToModels(orders), nil
}

// OrderBurger is the resolver for the orderBurger field.
func (r *mutationResolver) OrderBurger(ctx context.Context, userID string, burgerDayID string, specialRequest []model.SpecialOrders) (*model.Order, error) {
	order := &persistence.Order{
		ID:             uuid.New().String(),
		UserId:         userID,
		BurgerDayId:    burgerDayID,
		SpecialRequest: persistence.SpecialOrdersToStrings(specialRequest),
	}

	res := r.DB.Create(order)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.OrderToModel(order), nil
}

// StartBurgerDay is the resolver for the start_burger_day field.
func (r *mutationResolver) StartBurgerDay(ctx context.Context, authorID string) (*model.BurgerDay, error) {
	burgerDay := &persistence.BurgerDay{
		ID:       uuid.New().String(),
		AuthorId: authorID,
	}

	res := r.DB.Create(burgerDay)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.BurgerDayToModel(burgerDay), nil
}

// CreateUser is the resolver for the create_user field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*model.User, error) {
	user := &persistence.User{
		ID:    uuid.New().String(),
		Name:  name,
		Email: email,
	}

	res := r.DB.Create(user)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.UserToModel(user), nil
}

// PayOrder is the resolver for the pay_order field.
func (r *mutationResolver) PayOrder(ctx context.Context, orderID string, userID string) (*model.Order, error) {
	order := &persistence.Order{ID: orderID}
	res := r.DB.First(order)
	if res.Error != nil {
		return nil, res.Error
	}
	order.Paid = true
	res = r.DB.Save(order)
	return persistence.OrderToModel(order), res.Error
}

// BurgerDay is the resolver for the burgerDay field.
func (r *orderResolver) BurgerDay(ctx context.Context, obj *model.Order) (*model.BurgerDay, error) {
	burgerDay := &persistence.BurgerDay{}
	res := r.DB.First(burgerDay, obj.BurgerDayId)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.BurgerDayToModel(burgerDay), nil
}

// User is the resolver for the user field.
func (r *orderResolver) User(ctx context.Context, obj *model.Order) (*model.User, error) {
	user := &persistence.User{}
	res := r.DB.First(user, obj.UserId)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.UserToModel(user), nil
}

// TodaysBurgers is the resolver for the todays_burgers field.
func (r *queryResolver) TodaysBurgers(ctx context.Context) (*model.BurgerDay, error) {
	burgerDay := &persistence.BurgerDay{}
	res := r.DB.Last(burgerDay)
	if res.Error != nil {
		return nil, res.Error
	}

	return persistence.BurgerDayToModel(burgerDay), nil
}

// BurgerDay returns BurgerDayResolver implementation.
func (r *Resolver) BurgerDay() BurgerDayResolver { return &burgerDayResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Order returns OrderResolver implementation.
func (r *Resolver) Order() OrderResolver { return &orderResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type burgerDayResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type orderResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

